name: Autotag
run-name: AutoTag on ${{ github.repository }}
on:
  push:
    branches:
      - main
jobs:
  create-tag:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Get latest tag
        uses: actions/github-script@v4
        id: latest_tag
        with:
          script: |
            const { data } = await github.repos.listTags({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 1
            });
            return data[0].name;
      - name: Determine new version
        id: determine_version
        run: |
          LAST_TAG="${{ steps.latest_tag.outputs.result }}"
          COMMITS=$(git log --pretty=format:%s $LAST_TAG..HEAD)
          if echo "$COMMITS" | grep -q "!"
          then
            NEW_VERSION="MAJOR"
          elif echo "$COMMITS" | grep -q "feat"
          then
            NEW_VERSION="MINOR"
          elif echo "$COMMITS" | grep -q "fix"
          then
            NEW_VERSION="PATCH"
          else
            echo "No relevant commit message found. Skipping tag creation."
            exit 0
          fi
          echo new_version=$NEW_VERSION >> $GITHUB_OUTPUT

      - name: Create new tag
        if: steps.determine_version.outputs.new_version != ''
        run: |
          LAST_TAG=$(git describe --abbrev=0 --tags)
          if [ "$LAST_TAG" = "" ]; then
            NEW_TAG="v1.0.0"
          else
            if [ "${{ steps.determine_version.outputs.new_version }}" = "MAJOR" ]; then
              IFS='.' read -ra VERSION_PARTS <<< "$LAST_TAG"
              NEW_TAG="v$((VERSION_PARTS[0]+1)).0.0"
            elif [ "${{ steps.determine_version.outputs.new_version }}" = "MINOR" ]; then
              IFS='.' read -ra VERSION_PARTS <<< "$LAST_TAG"
              NEW_TAG="v${VERSION_PARTS[0]}.$((VERSION_PARTS[1]+1)).0"
            else
              IFS='.' read -ra VERSION_PARTS <<< "$LAST_TAG"
              NEW_TAG="v${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$((VERSION_PARTS[2]+1))"
            fi
          fi
          echo "Creating tag $NEW_TAG"
          git tag $NEW_TAG
          git push origin $NEW_TAG