name: Autotag
run-name: AutoTag on ${{ github.repository }}
on:
  push:
    branches:
      - main
jobs:
  create-tag:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Get latest tag
        uses: actions/github-script@v4
        id: latest_tag
        with:
          script: |
            const { data } = await github.repos.listTags({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 1
            });
            return data[0].name;
      - name: Determine new version
        id: version
        run: |
          LAST_TAG=${{ steps.latest_tag.outputs.result }}
          COMMITS=$(git log --pretty=format:%s $LAST_TAG..HEAD)
          if echo "$COMMITS" | grep -q "!"
          then
            NEW_VERSION="MAJOR"
          elif echo "$COMMITS" | grep -q "feat"
          then
            NEW_VERSION="MINOR"
          elif echo "$COMMITS" | grep -q "fix"
          then
            NEW_VERSION="PATCH"
          else
            echo "No relevant commit message found. Skipping tag creation."
            exit 0
          fi
          echo new_version=$NEW_VERSION >> $GITHUB_OUTPUT
      - name: Create tag
        if: steps.version.outputs.new_version != ${{ github.ref }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git tag ${{ steps.version.outputs.new_version }}
          git push origin ${{ steps.version.outputs.new_version }}